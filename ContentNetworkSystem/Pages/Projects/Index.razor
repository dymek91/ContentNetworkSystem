@page "/Projects"
@page "/Projects/Index"
@inject NavigationManager NavigationManager

@attribute [Authorize]

@using ContentNetworkSystem.Data
@using ContentNetworkSystem.Models
@using ContentNetworkSystem.Models.ViewModels
@inject IProjectsService projectsService
@inject IGroupsService groupsService

<h1>Projects</h1>


@if (projects == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        Total Count: @projectsCount | Page: @viewModel.PageIndex / @viewModel.TotalPages
    </div>
    <EditForm Model="@viewModel">
        <div class="form-group">
            <label class="col-form-label">
                Was Success:
                <InputSelect class="form-control" @bind-Value="viewModel.Filters.WasSuccess" @oninput="@(args => OnWasSuccessChange(args))" type="text">
                    <option value="null">All</option>
                    <option value="true">Success</option>
                    <option value="false">Failed</option>
                </InputSelect>
            </label>
            <label class="col-form-label">
                Active:
                <InputSelect class="form-control" @bind-Value="viewModel.Filters.Active" @oninput="@(args => OnActiveChange(args))" type="text">
                    <option value="null">All</option>
                    <option value="true">Active</option>
                    <option value="false">Disabled</option>
                </InputSelect>
            </label>
            <label class="col-form-label">
                Group:
                <InputSelect class="form-control" @bind-Value="viewModel.Filters.GroupId" @oninput="@(args => OnGroupChange(args))" type="text">
                    <option value="null">All</option>
                    @foreach (var group in groups)
                        {
                        <option value="@group.ID.ToString()">@group.Name.ToString()</option>
                        }
                </InputSelect>
            </label>
        </div>
    </EditForm>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Niche</th>
                <th>Group</th>
                <th>Content</th>
                <th>Date Added</th>
                <th>Post Frequency</th>
                <th>Last Post</th>
                <th>Was Success</th>
                <th>Is Active</th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var project in projects)
            {
                <tr>
                    <td @onclick="@(e => NavigateToDetails(project.ID))">@project.Name</td>
                    @if (project.Niche != null)
                    {
                        <td>@project.Niche.Name</td>
                    }
                    else
                    {
                        <td>None</td>
                    }
                    @if (project.Group != null)
                    {
                        <td>@project.Group.Name</td>
                    }
                    else
                    {
                        <td>None</td>
                    }
                    @if (project.Content != null)
                    {
                        <td @onclick="@(e => NavigateToWordpressDetails(project.Content.ID))">@project.Content.TypeName</td>
                    }
                    else
                    {
                        <td>None</td>
                    }
                    <td>@project.DateAdded</td>
                    @if (project.Frequency != null)
                    {
                        <td>@project.Frequency</td>
                    }
                    else
                    {
                        <td>None</td>
                    }
                    @if (project.LastPushed != null)
                    {
                        <td>@project.LastPushed</td>
                    }
                    else
                    {
                        <td>None</td>
                    }
                    @if (project.WasSuccess.HasValue)
                    {
                        <td>@(project.WasSuccess.Value ? "Success" : "Failed")</td>
                    }
                    else
                    {
                        <td>None</td>
                    }
                    @if (project.Active)
                    {
                        <td>Active</td>
                    }
                    else
                    {
                        <td>Disabled</td>
                    }
                    <td><input type="button" class="btn btn-primary" @onclick="@(e => NavigateToEdit(project.ID))" value="Edit" /></td>
                    <td><input type="button" class="btn btn-danger" @onclick="@(e => NavigateToDelete(project.ID))" value="Delete" /></td>
                </tr>
            }
        </tbody>
    </table>
}
@{
    var prevDisabled = !viewModel.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !viewModel.HasNextPage ? "disabled" : "";
}
<div>
    <button class="btn btn-primary @prevDisabled" @onclick="PreviousPage">
        Previous
    </button>
    <button class="btn btn-primary @nextDisabled" @onclick="NextPage">
        Next
    </button>
</div> 
<div><p> </p></div>
<div>
    <button class="btn btn-primary" @onclick="NavigateToAdd">
        Add Project
    </button>
</div>


@code {

    ICollection<Project> projects;

    List<Group> groups = new List<Group>();

    ProjectsViewModel viewModel = new ProjectsViewModel();

    int projectsCount;
    int pageSize = 20;

    protected override async Task OnInitializedAsync()
    {
        projectsCount = await projectsService.CountAsync();
        viewModel = new ProjectsViewModel(projectsCount, pageSize);
        projects = await projectsService.GetAsync(pageSize: pageSize);
        groups = await groupsService.GetAsync();
        if (groups == null) groups = new List<Group>();
    }

    private void NavigateToAdd()
    {
        NavigationManager.NavigateTo("Projects/Add");
    }
    private void NavigateToEdit(int id)
    {
        NavigationManager.NavigateTo("Projects/Edit/" + id);
    }
    private void NavigateToDelete(int id)
    {
        NavigationManager.NavigateTo("Projects/Delete/" + id);
    }
    private void NavigateToDetails(int id)
    {
        NavigationManager.NavigateTo("Projects/Details/" + id);
    }
    private void NavigateToWordpressDetails(int id)
    {
        NavigationManager.NavigateTo("Contents/Details/" + id);
    }


    private async Task OnWasSuccessChange(ChangeEventArgs args)
    {
        viewModel.Filters.WasSuccess = (string)args.Value;
        await FilterChange();

        await ViewChange();
    }

    private async Task OnActiveChange(ChangeEventArgs args)
    {
        viewModel.Filters.Active = (string)args.Value;
        await FilterChange();

        await ViewChange();
    }
    private async Task OnGroupChange(ChangeEventArgs args)
    {
        viewModel.Filters.GroupId = (string)args.Value;
        await FilterChange();

        await ViewChange();
    }

    private async Task PreviousPage()
    {
        if (viewModel.HasPreviousPage)
        {
            viewModel.PageIndex = viewModel.PageIndex - 1;
            await ViewChange();
        }
    }
    private async Task NextPage()
    {
        if (viewModel.HasNextPage)
        {
            viewModel.PageIndex = viewModel.PageIndex + 1;
            await ViewChange();
        }
    }

    private async Task FilterChange()
    {
        viewModel.PageIndex = 1;
        projectsCount = await projectsService.CountAsync(
                wasSuccess: viewModel.Filters.GetWasSuccess(),
                active: viewModel.Filters.GetActive(),
                groupId: viewModel.Filters.GetGroupId());
        viewModel.ChangeCount(projectsCount);
    }

    private async Task ViewChange()
    {
        Console.WriteLine("WasSuccess: {0} | Active: {1} | Group: {2}", viewModel.Filters.WasSuccess, viewModel.Filters.Active, viewModel.Filters.GroupId);

        projects = await projectsService.GetAsync(
                wasSuccess: viewModel.Filters.GetWasSuccess(),
                active: viewModel.Filters.GetActive(),
                groupId: viewModel.Filters.GetGroupId(),
                pageIndex: viewModel.PageIndex,
                pageSize: viewModel.PageSize);

        StateHasChanged();
    }


}
