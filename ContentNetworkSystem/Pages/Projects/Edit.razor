@page "/Projects/Edit/{projectId:int}"

@attribute [Authorize]

@inject NavigationManager NavigationManager
@using ContentNetworkSystem.Data
@using ContentNetworkSystem.Models
@inject IProjectsService projectsService
@inject INichesService nichesService
@inject IGroupsService groupsService

<h3>Edit Projects</h3>
<hr />
@if (projectModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="@projectModel" OnValidSubmit="HandleValidSubmitAsync">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <button class="btn btn-primary" type="button" @onclick="NavigateToContentEdit">Edit Content</button>
                </div>
                <div class="form-group">
                    <label>
                        Project Name:
                        <InputText class="form-control" id="name" @bind-Value="projectModel.Name" />
                    </label>
                </div>
                <div class="form-group">
                    <label>
                        Post Frequency:
                        <InputNumber class="form-control" id="time" @bind-Value="freqHours" />hours
                    </label>
                </div>
                <div class="form-group">
                    <label>
                        Niche:
                        @if (niches == null)
                        {
                            <InputSelect class="form-control" @bind-Value="nicheId" disabled></InputSelect>
                        }
                        else
                        {
                            <InputSelect class="form-control" @bind-Value="nicheId" @oninput="@(args => OnNicheChange(args))" type="text">
                                <option value="None">None</option>
                                @foreach (var niche in niches)
                                        {
                                    <option value=@niche.ID.ToString()>@niche.ID.ToString() : @niche.Name</option>
                                        }
                            </InputSelect>
                        }
                    </label>
                </div>
                <div class="form-group">
                    <label>
                        Choose Group:
                        <InputSelect class="form-control" @bind-Value="groupSelect" @oninput="@(args => OnGroupChange(args))" type="text">
                            @foreach (var group in availableGroups)
                                {
                                <option value=@group.Name>@group.Name</option>
                                }
                        </InputSelect>
                    </label>
                </div>
                <div class="form-group">
                    <label>
                        Choosen Group (can type new):
                        <InputText class="form-control" id="groupName" @bind-Value="groupName"></InputText>
                    </label>
                </div>
                <div class="form-group">
                    <label>
                        Active:
                        <InputCheckbox class="form-control" id="active" @bind-Value="projectModel.Active" />
                    </label>
                </div>

                <div class="form-group">
                    <button class="btn btn-primary" type="submit">Submit</button>
                    <button class="btn btn-danger" type="button" @onclick="NavigateToProjects">Cancel</button>
                </div>


            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public int ProjectId { get; set; }

    private Project projectModel;
    private object nameOldValue;
    private object activeOldValue;

    private int freqHours;

    ICollection<Niche> niches;
    string nicheId;

    private List<Group> availableGroups = new List<Group>();
    private string groupSelect = "";
    private string groupName = "";

    protected override async Task OnInitializedAsync()
    {
        projectModel = await projectsService.GetAsync(ProjectId);
        freqHours = Convert.ToInt32(projectModel.Frequency.TotalHours);
        nameOldValue = projectModel.Name;
        activeOldValue = projectModel.Active;
        niches = await nichesService.GetAsync();

        availableGroups = await groupsService.GetAsync();
        if (availableGroups == null)
        {
            availableGroups = new List<Group>();
        }
        if(projectModel.Group != null)
        {
            groupName = projectModel.Group.Name;
        }
    }

    private async Task HandleValidSubmitAsync()
    {
        Console.WriteLine("OnValidSubmit");
        projectModel.Frequency = TimeSpan.FromHours(freqHours);

        if (groupName.Length > 0)
        {
            Group group = new Group();
            group.Name = groupName;
            group = await groupsService.AddAsync(group);
            projectModel.Group = group;
        }

        await projectsService.UpdateAsync(projectModel);
        NavigationManager.NavigateTo("Projects/Index");
    }

    private void NavigateToProjects()
    {
        projectModel.Name = (string)nameOldValue;
        projectModel.Active = (bool)activeOldValue;
        NavigationManager.NavigateTo("Projects/Index");
    }

    private void NavigateToContentEdit()
    {
        NavigationManager.NavigateTo("Contents/" + projectModel.Content.TypeName + "/Edit/" + projectModel.Content.ID);
    }
    private async Task OnNicheChange(ChangeEventArgs args)
    {
        Console.WriteLine("OnNicheChange");
        if ((string)args.Value == "None")
        {
            projectModel.NicheId = null;
        }
        else
        {
            projectModel.NicheId = int.Parse((string)args.Value);
        }
    }
    private async Task OnGroupChange(ChangeEventArgs args)
    {
        Console.WriteLine("OnGroupChange");

        groupName = (string)args.Value;
    }

}
